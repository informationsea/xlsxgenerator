use super::*;

#[test]
fn test_json_load() -> anyhow::Result<()> {
    let json_data = include_bytes!("../../examples/test1.json");
    let data: WorkbookDef = serde_json::from_reader(&json_data[..])?;
    //eprintln!("{:?}", data);

    let expected = WorkbookDef {
        sheets: vec![
            WorksheetDef {
                name: Some("Sheet 1 (CSV)".to_string()),
                source: Some(SheetSource::Def(vec![SheetSourceDef {
                    file: Some("data/data1.csv".to_string()),
                    data: None,
                    format: SheetSourceType::Auto,
                    columns: Some(vec![
                        SheetSourceColumnDef {
                            format: None,
                            cell_type: CellType::Number,
                            header_comment: Some("header comment".to_string()),
                            header_type: CellType::Auto,
                            header_value: None,
                            link_prefix: None,
                        },
                        SheetSourceColumnDef {
                            format: None,
                            cell_type: CellType::String,
                            header_comment: None,
                            header_type: CellType::Auto,
                            header_value: None,
                            link_prefix: None,
                        },
                        SheetSourceColumnDef {
                            format: Some(FormatDef {
                                font_name: Some("Arial".to_string()),
                                font_size: Some(20),
                                font_color: None,
                                background_color: None,
                                num_format: Some("0.00".to_string()),
                                border: None,
                                underline: false,
                            }),
                            cell_type: CellType::Number,
                            header_comment: None,
                            header_type: CellType::Auto,
                            header_value: None,
                            link_prefix: None,
                        },
                        SheetSourceColumnDef {
                            format: None,
                            cell_type: CellType::String,
                            header_comment: None,
                            header_type: CellType::Auto,
                            header_value: None,
                            link_prefix: None,
                        },
                        SheetSourceColumnDef {
                            format: None,
                            cell_type: CellType::String,
                            header_comment: None,
                            header_type: CellType::Auto,
                            header_value: None,
                            link_prefix: None,
                        },
                    ]),
                    autofilter: true,
                    table: false,
                    table_style_type: Some(TableStyleType::Dark),
                    table_style_type_num: Some(2),
                    has_header: true,
                    start_row: 1,
                    start_column: 1,
                    vcf_config: None,
                    comment_line_prefix: None,
                    filter_list: Some(TableFilterList {
                        column_header: "Header B".to_string(),
                        items: vec!["A".to_string(), "C".to_string()],
                    }),
                }])),
                freeze: None,
                cells: vec![CellDef {
                    column: Some(0),
                    row: Some(0),
                    column_relative: None,
                    row_relative: None,
                    value: Some(CellValue::String("Title".to_string())),
                    cell_type: CellType::Auto,
                    format: Some(FormatDef {
                        font_name: Some("Arial".to_string()),
                        font_size: Some(30),
                        font_color: Some("red".to_string()),
                        background_color: Some("yellow".to_string()),
                        num_format: None,
                        border: Some(BorderFormatDefChoice::TypeOnly(BorderType::Medium)),
                        underline: false,
                    }),
                    comment: Some("Title comment".to_string()),
                    url: None,
                    merge_column: None,
                    merge_row: None,
                }],
                column_widths: vec![16., 10., 8.],
                row_heights: vec![],
                images: vec![],
            },
            WorksheetDef {
                name: Some("Sheet 1 (TSV)".to_string()),
                source: Some(SheetSource::Path("data/data1.txt".to_string())),
                freeze: Some(SheetFreeze { row: 1, column: 1 }),
                cells: vec![],
                column_widths: vec![],
                row_heights: vec![],
                images: vec![],
            },
            WorksheetDef {
                name: Some("Cells".to_string()),
                source: None,
                freeze: None,
                cells: vec![
                    CellDef {
                        column: Some(0),
                        row: Some(0),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::String("text".to_string())),
                        cell_type: CellType::String,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(1),
                        row: Some(0),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::Number(1.)),
                        cell_type: CellType::Number,
                        format: Some(FormatDef {
                            font_name: None,
                            font_size: None,
                            font_color: None,
                            background_color: None,
                            num_format: None,
                            border: Some(BorderFormatDefChoice::Multi(vec![
                                BorderFormatDef {
                                    border_type: BorderType::Medium,
                                    color: Some("red".to_string()),
                                },
                                BorderFormatDef {
                                    border_type: BorderType::DashDot,
                                    color: Some("blue".to_string()),
                                },
                            ])),
                            underline: false,
                        }),
                        comment: Some("Cell comment".to_string()),
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(2),
                        row: Some(0),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::Number(2.)),
                        cell_type: CellType::Number,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(3),
                        row: Some(0),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::Boolean(true)),
                        cell_type: CellType::Boolean,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(4),
                        row: Some(0),
                        column_relative: None,
                        row_relative: None,
                        value: None,
                        cell_type: CellType::Null,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(0),
                        row: Some(1),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::String("https://www.google.co.jp".to_string())),
                        cell_type: CellType::Url,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: Some(3),
                        merge_row: Some(2),
                    },
                    CellDef {
                        column: Some(0),
                        row: Some(4),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::Number(10.5)),
                        cell_type: CellType::Percent,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(1),
                        row: Some(4),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::String("internal:'Kraken2'!A1".to_string())),
                        cell_type: CellType::Auto,
                        format: None,
                        comment: None,
                        url: None,
                        merge_column: None,
                        merge_row: None,
                    },
                    CellDef {
                        column: Some(2),
                        row: Some(4),
                        column_relative: None,
                        row_relative: None,
                        value: Some(CellValue::String("Kraken2".to_string())),
                        cell_type: CellType::Auto,
                        format: None,
                        comment: None,
                        url: Some("internal:'Kraken2'!A1".to_string()),
                        merge_column: None,
                        merge_row: None,
                    },
                ],
                column_widths: vec![],
                row_heights: vec![28., 34., 62.],
                images: vec![
                    SheetImage {
                        file: "data/ginkaku.jpg".to_string(),
                        column: 3,
                        row: 3,
                        width_scale: Some(0.3),
                        height_scale: Some(0.3),
                    },
                    SheetImage {
                        file: "data/kitsune.jpg".to_string(),
                        column: 2,
                        row: 15,
                        width_scale: None,
                        height_scale: None,
                    },
                ],
            },
            WorksheetDef {
                name: Some("VCF Import 1".to_string()),
                source: Some(SheetSource::Path("vcf/simple1-snpeff.vcf".to_string())),
                freeze: None,
                cells: vec![],
                column_widths: vec![],
                row_heights: vec![],
                images: vec![],
            },
            WorksheetDef {
                name: Some("VCF Import 2".to_string()),
                source: Some(SheetSource::Def(vec![SheetSourceDef {
                    file: Some("vcf/1kGP-subset-snpeff.vcf".to_string()),
                    data: None,
                    format: SheetSourceType::Auto,
                    vcf_config: Some(VCFConfigDef {
                        split_multi_allelic: true,
                        decode_genotype: true,
                        info: None,
                        format: None,
                        priority_format: None,
                        priority_info: None,
                    }),
                    columns: None,
                    autofilter: true,
                    table: false,
                    table_style_type: None,
                    table_style_type_num: None,
                    has_header: true,
                    start_row: 1,
                    start_column: 1,
                    comment_line_prefix: None,
                    filter_list: Some(TableFilterList {
                        column_header: "SnpEff Impact".to_string(),
                        items: vec!["LOW".to_string()],
                    }),
                }])),
                freeze: Some(SheetFreeze { row: 2, column: 4 }),
                cells: vec![],
                column_widths: vec![],
                row_heights: vec![],
                images: vec![],
            },
            WorksheetDef {
                name: None,
                source: Some(SheetSource::Def(vec![SheetSourceDef {
                    file: None,
                    data: Some("A\tB\nC\tD".to_string()),
                    format: SheetSourceType::Auto,
                    vcf_config: None,
                    columns: None,
                    autofilter: true,
                    table: true,
                    table_style_type: Some(TableStyleType::Light),
                    table_style_type_num: Some(20),
                    has_header: true,
                    start_row: 0,
                    start_column: 0,
                    comment_line_prefix: None,
                    filter_list: None,
                }])),
                freeze: None,
                cells: vec![],
                column_widths: vec![],
                row_heights: vec![],
                images: vec![],
            },
            WorksheetDef {
                name: Some("Relative Position".to_string()),
                source: None,
                freeze: None,
                cells: vec![
                    CellDef {
                        value: Some(CellValue::String("Relative Position".to_string())),
                        column: Some(0),
                        row: Some(0),
                        cell_type: CellType::Auto,
                        row_relative: None,
                        column_relative: None,
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                    CellDef {
                        value: Some(CellValue::String("A".to_string())),
                        column: None,
                        row: None,
                        cell_type: CellType::Auto,
                        row_relative: None,
                        column_relative: None,
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                    CellDef {
                        value: Some(CellValue::String("B".to_string())),
                        column: None,
                        row: None,
                        cell_type: CellType::Auto,
                        row_relative: None,
                        column_relative: None,
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                    CellDef {
                        value: Some(CellValue::String("next line".to_string())),
                        column: None,
                        row: None,
                        cell_type: CellType::Auto,
                        row_relative: Some(1),
                        column_relative: None,
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                    CellDef {
                        value: Some(CellValue::String("C".to_string())),
                        column: None,
                        row: None,
                        cell_type: CellType::Auto,
                        row_relative: None,
                        column_relative: None,
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                    CellDef {
                        value: Some(CellValue::String("D".to_string())),
                        column: None,
                        row: None,
                        cell_type: CellType::Auto,
                        row_relative: Some(2),
                        column_relative: Some(3),
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                    CellDef {
                        value: Some(CellValue::String("E".to_string())),
                        column: None,
                        row: None,
                        cell_type: CellType::Auto,
                        row_relative: Some(-1),
                        column_relative: Some(-1),
                        format: None,
                        comment: None,
                        url: None,
                        merge_row: None,
                        merge_column: None,
                    },
                ],
                column_widths: vec![],
                row_heights: vec![],
                images: vec![],
            },
        ],
    };

    assert_eq!(expected, data);

    Ok(())
}
